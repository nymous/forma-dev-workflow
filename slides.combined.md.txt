---
title: Un workflow de d√©veloppement moderne
pdf: modern-dev-workflow.pdf
slideNumber: true
controls: true
controlsLayout: edges
---

# Un workflow de d√©veloppement moderne {bg=#2C3E50EE x=0 y=0 .light-on-dark}

<small>Thomas 'Nymous' Gaudin ‚Ä¢ 2019-01</small>

<div class="intro">
[![](fab fa-github)](https://github.com/nymous)
[![](fas fa-globe)](https://nymous.io)
[![](fas fa-envelope)](email:t.goudine@gmail.com)
</div>

# Nymous

* C'est moi üòâ
* Pr√©sident du R√©zol√©o 2015-2016
* √âl√®ve en EBM 2017-2018
* Consultant chez Extia, en mission DevOps √† Adeo
* [![](fab fa-github) https://github.com/nymous](https://github.com/nymous)

# Plan

1. Quoi ? Pourquoi ?
2. Gestion de version
3. Tests
4. Automatisation
5. Documentation
6. D√©ploiement

# 1. Quoi ? Pourquoi ? {bg=#2C3E50EE}

# 1.1 Quoi ?

* Pr√©sentation des outils utiles √† tout projet de dev moderne

* Int√©gration de ces outils dans une cha√Æne

* Projet squelette

# 1.2 Pourquoi ?

* Travail plus fluide
* Cycle *d√©veloppement => mise en production* raccourci
  * => feedback rapide
* Moins peur de faire des erreurs
  * petits incr√©ments faciles √† corriger/annuler
  * un workflow qui r√©duit les erreurs
  * la MEP devient la routine
* Process automatis√©
  * => moins d'erreurs humaines

# 2. Gestion de version {bg=#2C3E50EE}

# 2.1 Pourquoi ?

Pourquoi faire de la gestion de version ?

* Retour en arri√®re
* Exp√©rimentation possible
* Travail √† plusieurs en parall√®le

# 2.1 Outils

Outils de collaboration :

* [GitHub](https://github.com/)
* [Gitlab](https://gitlab.com/)
* [Bitbucket](https://bitbucket.org/)

# 2.2 Bonnes pratiques

* Branches (plusieurs workflows possibles)
  * tout dans master ü§Æ
  * gitflow
  * master + branches de feature
* Branche master prot√©g√©e
* Pull requests & code review

# Tests {bg=#2C3E50EE}

# 3.1 Pourquoi ?

* S'assurer que le code fait ce qui est pr√©vu
  * Tests unitaires
* S'assurer que des bugs corrig√©s ne reviennent pas
  * Tests de non-r√©gression
* S'assurer de la qualit√© et s√©curit√© du code
  * Outils d'analyse statique, linters
* Avoir confiance pendant un refactoring
  * Si tests vert => pas de changement de comportement

# 3.2 Outils

* Linter/Formatage :
  * [ESLint](https://eslint.org/)
  * [Prettier](https://prettier.io/)
* Tests :
  * [Jest](https://jestjs.io/)
  * [Mocha](https://mochajs.org/)
  * [ava](https://github.com/avajs/ava)

# 3.3 Services

* Code coverage :
  * [Codacy](https://www.codacy.com/)
  * [Codecov](https://codeclimate.com/quality/)
  * [CodeClimate](https://codeclimate.com/quality/)

# Automatisation {bg=#2C3E50EE}

# 4.1 Pourquoi ?

* R√©duire les erreurs humaines
* Forcer les bonnes pratiques
* T√¢che r√©p√©titive => automatisation => gain de temps

# 4.2 Outils

* [Travis](https://travis-ci.com/)
* [Circle CI](https://circleci.com/)
* [Gitlab CI](https://about.gitlab.com/product/continuous-integration/)
* [Codeship](https://codeship.com/)
* [Drone CI](https://drone.io/)

# Documentation {bg=#2C3E50EE}

# 5.1 Pourquoi ?

* Information pour les autres
* Information pour soi
* Respect de sa propre API

# 5.2 Outils

* [ApiDoc](http://apidocjs.com/)
* [Sawgger](https://editor.swagger.io/)

# D√©ploiement {bg=#2C3E50EE}

# 6. D√©ploiement

* [Capistrano](https://capistranorb.com/)
* [Ansible](https://www.ansible.com/), [Puppet](https://puppet.com/)
* [Docker](https://www.docker.com/) (+ docker-compose, Swarm)
* [Kubernetes](https://kubernetes.io/)
* [OpenShift](https://www.openshift.com/), [Rancher](https://rancher.com/)

<p></p>

* [Traefik](https://traefik.io/) + [Watchtower](https://github.com/v2tec/watchtower)

